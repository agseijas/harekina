<!DOCTYPE html>
<html lang="en">
  
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>
    <%= pet.title %>
  </title>
  <%- include('partials/analytics') %>
  <link href="https://fonts.googleapis.com/css2?family=Fredoka&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="./styles/all.css">
  <style>
    /* Basic reset and prevent horizontal scroll */
    body, html {
      margin: 0;
      padding: 0;
      overflow-x: hidden;
      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5); /* Subtle shadow for all text */
    }
    /* Carousel container fills viewport height */
    .carousel-container {
      position: relative;
      width: 100%;
      height: 100vh;
      overflow: hidden;
    }
    /* Track to hold slides; using flex makes it easy to slide */
    .carousel-track {
      display: flex;
      transition: transform 0.5s ease;
      height: 100%;
    }
    /* Each slide takes full viewport width and centers its content */
    .carousel-slide {
      min-width: 100%;
      height: 100%;
      display: flex;
      justify-content: center;
      align-items: center;
    }
    /* Images adapt to container; defaults to filling width */
    .carousel-slide img {
      display: block;
      max-width: 100%;
      max-height: 100%;
      border-radius: 10px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      margin-bottom: 0.7em;

    }
    /* In landscape, let images fill height instead */
    @media (orientation: landscape) {
      .carousel-slide img {
        width: auto;
        height: 100%;
      }
    }
    /* Navigation buttons */
    .carousel-button {
      position: absolute;
      top: 50%;
      transform: translateY(-50%);
      background-color: rgba(0,0,0,0.5);
      color: #fff;
      border: none;
      padding: 10px;
      cursor: pointer;
      z-index: 10;
    }
    .carousel-button.prev {
      left: 10px;
    }
    .carousel-button.next {
      right: 10px;
    }

    /* Text below appears on scroll */
    .scroll-text {
      min-width: 30%;
      opacity: 0;
      transition: opacity 0.5s ease-in-out;
      padding: 20px;
      font-size: 1.2em;
    }

    .scroll-text.visible {
      opacity: 1;
    }

    .overlay-detail-title {
      display: block;
      font-weight: bold;
      margin-top: 0.5em;

    }

    .overlay-detail-text {
      display: block;
      margin-bottom: 5px;
      margin-left: 20px;
    }

    .modal {
      display: none; /* Hidden by default */
      position: fixed;
      z-index: 1000;
      left: 0;
      top: 0;
      width: 100%;
      height: 100%;
      overflow: auto;
      background-color: rgba(0, 0, 0, 0.5); /* Black background with opacity */
    }

    .modal-content {
      background-color: #fff;
      margin: 15% auto;
      padding: 20px;
      border: 1px solid #888;
      width: 80%;
      max-width: 500px;
      text-align: left;
      border-radius: 8px;
      color: black;
      text-shadow: none;
    }

    .close-btn {
      color: #aaa;
      float: right;
      font-size: 28px;
      font-weight: bold;
      cursor: pointer;
    }

    .close-btn:hover,
    .close-btn:focus {
      color: black;
      text-decoration: none;
    }

    .overlay-detail-btnlink {
      display: inline-block;
      padding: 10px 20px;
      background-color: #007BFF; /* Button background color */
      color: #fff; /* Text color */
      text-decoration: none; /* Remove underline */
      border-radius: 5px; /* Rounded corners */
      font-size: 1em; /* Font size */
      font-weight: bold; /* Bold text */
      text-align: center; /* Center text */
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); /* Add a subtle shadow */
      transition: background-color 0.3s ease, transform 0.2s ease; /* Smooth hover effect */
    }

    .overlay-detail-btnlink:hover {
      background-color: #0056b3; /* Darker background on hover */
      transform: translateY(-2px); /* Slight lift effect */
    }

    .overlay-detail-btnlink:active {
      background-color: #004085; /* Even darker background on click */
      transform: translateY(0); /* Reset lift effect */
    }

    .expandable-header {
      color: #007BFF; /* Link color */
      text-decoration: underline; /* Underline to mimic a link */
      cursor: pointer; /* Pointer cursor for interactivity */
      font-size: 1em; /* Adjust font size if needed */
    }

    .expandable-header:hover {
      color: #0056b3; /* Darker color on hover */
    }

    .hover-button {
      position: fixed;
      padding: 0.5em 1.5em;
      top: 90%;
      left: 50%;
      transform: translateX(-50%);
      background-color: rgba(0, 123, 255, 0.7);
      color: #fff;
      border: none;
      border-radius: 1em;
      font-size: 1em;
      font-weight: bold;
      cursor: pointer;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      transition: background-color 0.3s ease, transform 0.2s ease;
      display: block; /* Visible by default */
      z-index: 1000;
      width: max-content;
    }
  </style>
</head>
<body>
  <div class="carousel-container">
    <div class="carousel-track">
      <% pet.images.forEach((image, index) => { %>
        <div class="carousel-slide"><img src="./images/<%= pet.normalizedName %>/<%= image %>" alt="Image <%= index + 1 %>"></div>
      <% }); %>
    </div>
    <!-- Navigation buttons -->
    <button class="carousel-button prev" id="prevBtn">&#10094;</button>
    <button class="carousel-button next" id="nextBtn">&#10095;</button>
  </div>
  <button id="topButton" class="hover-button"><%= knowme_button_info %></button>
  <div class="scroll-text" id="scrollText">
    <span class="overlay-detail-title overlay-detail-title-name"><%= pet.title %></span>
    <span class="overlay-detail-btn">
      <a href="#" class="overlay-detail-btnlink"><%= contact.wantToAdopt %> <%= pet.title %> ?</a>
    </span>
    <span class="overlay-detail-title"><%= description %>:</span> <span class="overlay-detail-text"><%= pet.description %></span>
    <span class="overlay-detail-title"><%= status %>:</span> <span class="overlay-detail-text"><%= pet.status %></span>
    <% if (pet.sex) { %>
      <span class="overlay-detail-title"><%= sex %>:</span> <span class="overlay-detail-text"><%= pet.sex %></span>
    <% } %>
    <% if (pet.birthdate) { %>
      <span class="overlay-detail-title"><%= birthdate %>:</span> <span class="overlay-detail-text"><%= new Date(pet.birthdate).toISOString().split('T')[0] %></span>
    <% } %>
    <% if (pet.family) { %>
      <span class="overlay-detail-title"><%= family %>:</span> <span class="overlay-detail-text"><%= pet.family %></span>
    <% } %>
    <% if (pet.furColors) { %>
      <span class="overlay-detail-title"><%= furColors %>:</span> <span class="overlay-detail-text"><%= pet.furColors %></span>
    <% } %>
    <% if (pet.breed) { %>
      <span class="overlay-detail-title"><%= breed %>:</span> <span class="overlay-detail-text"><%= pet.breed %></span>
    <% } %>
    <% if (pet.eyeColor) { %>
      <span class="overlay-detail-title"><%= eyeColor %>:</span> <span class="overlay-detail-text"><%= pet.eyeColor %></span>
    <% } %>
    <% if (pet.weight) { %>
      <span class="overlay-detail-title"><%= weight %>:</span> <span class="overlay-detail-text"><%= pet.weight %></span>
    <% } %>
    <% if (pet.personality) { %>
      <span class="overlay-detail-title"><%= personality %>:</span> <span class="overlay-detail-text"><%= pet.personality %></span>
    <% } %>
    <% if (pet.health) { %>
      <span class="overlay-detail-title"><%= health %>:</span> <span class="overlay-detail-text"><%= pet.health %></span>
    <% } %>
    <% if (pet.neutered) { %>
      <span class="overlay-detail-title"><%= neutered %>:</span> <span class="overlay-detail-text"><%= pet.neutered %></span>
    <% } %>
    <% if (pet.vaccinated) { %>
      <span class="overlay-detail-title"><%= vaccinated %>:</span> <span class="overlay-detail-text"><%= pet.vaccinated %></span>
    <% } %>
    <% if (pet.lastVaccinationDate) { %>
      <span class="overlay-detail-title"><%= vaccinatedDate %>:</span> <span class="overlay-detail-text"><%= pet.lastVaccinationDate %></span>
    <% } %>
    <% if (pet.vaccinationType) { %>
      <span class="overlay-detail-title"><%= vaccinatedType %>:</span> <span class="overlay-detail-text"><%= pet.vaccinationType %></span>
    <% } %>
  </div>

  <div id="popupModal" class="modal">
    <div class="modal-content">
      <span class="close-btn">&times;</span>


      <div class="expandable-section">
        <p><%- contact.conditions_warning %></p>
        <div class="expandable-content" id="expandableContent" style="display: none;">
          <p><%- contact.conditions %></p>
          <a href="<%= contactAddresses.whatsapp %>" class="overlay-detail-btnlink"><%= contact.whatsapp %></a>
        </div>
      </div>
    </div>
  </div>

  <%- include('partials/footer') %>

  <script>
    let currentSlide = 0;
    const slides = document.querySelectorAll('.carousel-slide');
    const track = document.querySelector('.carousel-track');
    const topButton = document.getElementById('topButton');
    const scrollText = document.getElementById('scrollText');

    const totalSlides = slides.length;

    // Update the carousel's position based on the current slide index
    function updateCarousel() {
      track.style.transform = 'translateX(' + (-currentSlide * 100) + '%)';
    }

    let autoSlideInterval = setInterval(function() {
      currentSlide = (currentSlide + 1) % totalSlides;
      updateCarousel();
    }, 5000);

    // Next and previous button functionality
    document.getElementById('nextBtn').addEventListener('click', function() {
      currentSlide = (currentSlide + 1) % totalSlides;
      updateCarousel();
      clearInterval(autoSlideInterval); // Stop auto-slide on manual navigation
    });

    document.getElementById('prevBtn').addEventListener('click', function() {
      currentSlide = (currentSlide - 1 + totalSlides) % totalSlides;
      updateCarousel();
      clearInterval(autoSlideInterval); // Stop auto-slide on manual navigation
    });

    document.addEventListener('DOMContentLoaded', function () {
      if (window.scrollY === 0) {
      topButton.style.display = 'block';
      } else {
      topButton.style.display = 'none';
      }
    });

    window.addEventListener('scroll', function() {
      if (window.scrollY > 50) {
        scrollText.classList.add('visible');
      } else {
        scrollText.classList.remove('visible');
      }

      if (scrollText.classList.contains('visible')) {
        topButton.style.display = 'none';
      } else {
        topButton.style.display = 'block';
      }
    });

    topButton.addEventListener('click', function () {
      window.scrollBy({
        top: window.innerHeight, // Scroll down by one viewport height
        behavior: 'smooth' // Smooth scrolling
      });
    });

    // JavaScript to handle modal functionality
    const modal = document.getElementById('popupModal');
    const closeBtn = document.querySelector('.close-btn');
    const btnLink = document.querySelector('.overlay-detail-btnlink');

    // Show modal when the link is clicked
    btnLink.addEventListener('click', function (event) {
      event.preventDefault(); // Prevent default link behavior
      modal.style.display = 'block';
    });

    // Close modal when the close button is clicked
    closeBtn.addEventListener('click', function () {
      modal.style.display = 'none';
    });

    // Close modal when clicking outside the modal content
    window.addEventListener('click', function (event) {
      if (event.target === modal) {
        modal.style.display = 'none';
      }
    });

    const expandableHeader = document.getElementById('expandableHeader');
    const expandableContent = document.getElementById('expandableContent');

    expandableHeader.addEventListener('click', function () {
      if (expandableContent.style.display === 'none') {
        expandableContent.style.display = 'block';
      } else {
        expandableContent.style.display = 'none';
      }
    });
  </script>
</body>
</html>
